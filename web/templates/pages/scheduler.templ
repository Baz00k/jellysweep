package pages

import (
	"fmt"
	"github.com/jon4hz/jellysweep/api/models"
	"github.com/jon4hz/jellysweep/scheduler"
	"github.com/jon4hz/jellysweep/web/templates"
)

templ SchedulerPanel(user *models.User, jobs map[string]*scheduler.JobInfo, cacheStats map[string]interface{}) {
	@templates.Layout("Scheduler", user) {
		<div class="space-y-6">
			<!-- Header -->
			<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
				<div>
					<h1 class="text-3xl font-bold text-gray-100">Scheduler Management</h1>
					<p class="mt-1 text-sm text-gray-400">
						Manage scheduled jobs and cache
					</p>
				</div>
				<div class="mt-4 sm:mt-0 flex space-x-3">
					<button
						id="refresh-jobs-btn"
						class="inline-flex items-center px-4 py-2 border border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-300 bg-gray-700 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
					>
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
						</svg>
						Refresh
					</button>
					<button
						id="clear-cache-btn"
						class="inline-flex items-center px-4 py-2 border border-red-600 rounded-md shadow-sm text-sm font-medium text-red-300 bg-red-700 hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200"
					>
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
						</svg>
						Clear Cache
					</button>
				</div>
			</div>
			<!-- Cache Stats -->
			@CacheStatsCard(cacheStats)
			<!-- Jobs List -->
			@JobsCard(jobs)
		</div>
		<!-- Include shared utility scripts -->
		@templates.ToastScript()
		@templates.ButtonLoadingUtils()
		@templates.ApiUtils()
		@templates.SmoothNavigationUtils()
		<!-- Include scheduler-specific scripts -->
		@SchedulerScript()
	}
}

templ CacheStatsCard(cacheStats map[string]interface{}) {
	<div class="bg-gray-800 rounded-lg border border-gray-700 p-6">
		<div class="flex items-center justify-between mb-4">
			<h2 class="text-xl font-semibold text-gray-100">Cache Statistics</h2>
			<div class="flex items-center space-x-2">
				<div class="w-2 h-2 bg-green-500 rounded-full"></div>
				<span class="text-sm text-gray-400">Active</span>
			</div>
		</div>
		<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
			<div class="bg-gray-900 rounded-lg p-4">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<svg class="w-8 h-8 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
						</svg>
					</div>
					<div class="ml-4">
						<p class="text-sm text-gray-400">Cache Items</p>
						<p class="text-2xl font-semibold text-gray-100">
							if itemCount, ok := cacheStats["itemCount"].(int); ok {
								{ fmt.Sprintf("%d", itemCount) }
							} else {
								0
							}
						</p>
					</div>
				</div>
			</div>
			<div class="bg-gray-900 rounded-lg p-4">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<svg class="w-8 h-8 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
					</div>
					<div class="ml-4">
						<p class="text-sm text-gray-400">Status</p>
						<p class="text-lg font-semibold text-green-400">Healthy</p>
					</div>
				</div>
			</div>
			<div class="bg-gray-900 rounded-lg p-4">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<svg class="w-8 h-8 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
					</div>
					<div class="ml-4">
						<p class="text-sm text-gray-400">Expiry</p>
						<p class="text-lg font-semibold text-purple-400">5 min</p>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ JobsCard(jobs map[string]*scheduler.JobInfo) {
	<div class="bg-gray-800 rounded-lg border border-gray-700">
		<div class="p-6 border-b border-gray-700">
			<h2 class="text-xl font-semibold text-gray-100">Scheduled Jobs</h2>
			<p class="text-sm text-gray-400 mt-1">
				{ fmt.Sprintf("%d jobs configured", len(jobs)) }
			</p>
		</div>
		<div class="p-0">
			if len(jobs) == 0 {
				@JobsEmptyState()
			} else {
				@JobsTable(jobs)
			}
		</div>
	</div>
}

templ JobsEmptyState() {
	<div class="text-center py-12">
		<div class="mx-auto w-24 h-24 bg-gray-900 rounded-full flex items-center justify-center mb-6">
			<svg class="w-12 h-12 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
		</div>
		<h3 class="text-xl font-semibold text-gray-300 mb-2">No scheduled jobs</h3>
		<p class="text-gray-500">
			No jobs have been configured yet. Jobs will appear here once the scheduler is set up.
		</p>
	</div>
}

templ JobsTable(jobs map[string]*scheduler.JobInfo) {
	<div class="overflow-x-auto">
		<table class="w-full">
			<thead class="bg-gray-900">
				<tr>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Job</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Status</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Schedule</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Last Run</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Next Run</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Stats</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Actions</th>
				</tr>
			</thead>
			<tbody class="divide-y divide-gray-700">
				for _, job := range jobs {
					@JobRow(job)
				}
			</tbody>
		</table>
	</div>
}

templ JobRow(job *scheduler.JobInfo) {
	<tr class="hover:bg-gray-750">
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="flex items-center">
				<div class="flex-shrink-0">
					if job.Enabled {
						<div class="w-2 h-2 bg-green-500 rounded-full"></div>
					} else {
						<div class="w-2 h-2 bg-gray-500 rounded-full"></div>
					}
				</div>
				<div class="ml-4">
					<div class="text-sm font-medium text-gray-100">{ job.Name }</div>
					<div class="text-sm text-gray-400">
						{ job.Description }
					</div>
				</div>
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			@JobStatusBadge(job.Status)
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-300">{ job.Schedule }</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-300">
				if !job.LastRun.IsZero() {
					{ job.LastRun.Format("2006-01-02 15:04:05") }
				} else {
					<span class="text-gray-500">Never</span>
				}
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-300">
				if !job.NextRun.IsZero() {
					{ job.NextRun.Format("2006-01-02 15:04:05") }
				} else {
					<span class="text-gray-500">-</span>
				}
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-300">
				<div>Runs: { fmt.Sprintf("%d", job.RunCount) }</div>
				<div class="text-red-400">Errors: { fmt.Sprintf("%d", job.ErrorCount) }</div>
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
			<div class="flex items-center space-x-2">
				if job.Singleton && job.Status == scheduler.JobStatusRunning {
					<button
						class="text-gray-500 cursor-not-allowed"
						disabled
						title="Singleton job is already running"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1m-6 4h1m4 0h1M4 20h16"></path>
						</svg>
					</button>
				} else {
					<button
						class="run-job-btn text-blue-400 hover:text-blue-300"
						data-job-id={ job.ID }
						title="Run Now"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1m-6 4h1m4 0h1M4 20h16"></path>
						</svg>
					</button>
				}
				if job.Enabled {
					<button
						class="disable-job-btn text-yellow-400 hover:text-yellow-300"
						data-job-id={ job.ID }
						title="Disable"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
					</button>
				} else {
					<button
						class="enable-job-btn text-green-400 hover:text-green-300"
						data-job-id={ job.ID }
						title="Enable"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1m-6 4h1m4 0h1M4 20h16"></path>
						</svg>
					</button>
				}
			</div>
		</td>
	</tr>
}

templ JobStatusBadge(status scheduler.JobStatus) {
	switch status {
		case scheduler.JobStatusRunning:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-900 text-blue-200">
				<svg class="w-3 h-3 mr-1 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
				</svg>
				Running
			</span>
		case scheduler.JobStatusCompleted:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-900 text-green-200">
				<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
				</svg>
				Completed
			</span>
		case scheduler.JobStatusFailed:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-900 text-red-200">
				<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
				Failed
			</span>
		case scheduler.JobStatusScheduled:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-900 text-gray-200">
				<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
				</svg>
				Scheduled
			</span>
		default:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-900 text-gray-200">
				Unknown
			</span>
	}
}

templ SchedulerScript() {
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			// Refresh jobs handler
			const refreshBtn = document.getElementById('refresh-jobs-btn');
			if (refreshBtn) {
				refreshBtn.addEventListener('click', function() {
					location.reload();
				});
			}

			// Clear cache handler
			const clearCacheBtn = document.getElementById('clear-cache-btn');
			if (clearCacheBtn) {
				clearCacheBtn.addEventListener('click', function() {
					if (confirm('Are you sure you want to clear the cache? This will remove all cached data.')) {
						clearCache();
					}
				});
			}

			// Job action handlers
			document.querySelectorAll('.run-job-btn').forEach(btn => {
				btn.addEventListener('click', function() {
					const jobId = this.dataset.jobId;
					runJob(jobId);
				});
			});

			document.querySelectorAll('.enable-job-btn').forEach(btn => {
				btn.addEventListener('click', function() {
					const jobId = this.dataset.jobId;
					enableJob(jobId);
				});
			});

			document.querySelectorAll('.disable-job-btn').forEach(btn => {
				btn.addEventListener('click', function() {
					const jobId = this.dataset.jobId;
					disableJob(jobId);
				});
			});
		});

		async function runJob(jobId) {
			try {
				const response = await fetch(`/admin/api/scheduler/jobs/${jobId}/run`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
				});

				const result = await response.json();
				if (result.success) {
					showToast('Job triggered successfully', 'success');
					// Refresh the page after a short delay to see updated status
					setTimeout(() => location.reload(), 1000);
				} else {
					showToast(result.error || 'Failed to trigger job', 'error');
				}
			} catch (error) {
				showToast('Error triggering job', 'error');
				console.error('Error:', error);
			}
		}

		async function enableJob(jobId) {
			try {
				const response = await fetch(`/admin/api/scheduler/jobs/${jobId}/enable`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
				});

				const result = await response.json();
				if (result.success) {
					showToast('Job enabled successfully', 'success');
					location.reload();
				} else {
					showToast(result.error || 'Failed to enable job', 'error');
				}
			} catch (error) {
				showToast('Error enabling job', 'error');
				console.error('Error:', error);
			}
		}

		async function disableJob(jobId) {
			try {
				const response = await fetch(`/admin/api/scheduler/jobs/${jobId}/disable`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
				});

				const result = await response.json();
				if (result.success) {
					showToast('Job disabled successfully', 'success');
					location.reload();
				} else {
					showToast(result.error || 'Failed to disable job', 'error');
				}
			} catch (error) {
				showToast('Error disabling job', 'error');
				console.error('Error:', error);
			}
		}

		async function clearCache() {
			try {
				const response = await fetch('/admin/api/scheduler/cache/clear', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
				});

				const result = await response.json();
				if (result.success) {
					showToast('Cache cleared successfully', 'success');
					location.reload();
				} else {
					showToast(result.error || 'Failed to clear cache', 'error');
				}
			} catch (error) {
				showToast('Error clearing cache', 'error');
				console.error('Error:', error);
			}
		}
	</script>
}
