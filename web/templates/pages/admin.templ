package pages

import (
	"fmt"
	"github.com/jon4hz/jellysweep/api/models"
	"github.com/jon4hz/jellysweep/web/templates"
)

templ AdminPanel(user *models.User, keepRequests []models.KeepRequest) {
	@templates.Layout("Admin Panel", user) {
		<div class="space-y-6">
			<!-- Header -->
			<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
				<div>
					<h1 class="text-3xl font-bold text-gray-100">Admin Panel</h1>
					<p class="mt-1 text-sm text-gray-400">
						Manage keep requests from users
					</p>
				</div>
				<div class="mt-4 sm:mt-0">
					<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-900 text-blue-200">
						{ len(keepRequests) } pending requests
					</span>
				</div>
			</div>
			<!-- Keep Requests List -->
			if len(keepRequests) == 0 {
				@AdminEmptyState()
			} else {
				<div class="space-y-4">
					<h3 class="text-xl font-semibold text-gray-100">Keep Requests</h3>
					<div class="space-y-4">
						for _, request := range keepRequests {
							@AdminKeepRequestCard(request)
						}
					</div>
				</div>
			}
		</div>
		<!-- Include shared utility scripts -->
		@templates.ToastScript()
		@templates.ButtonLoadingUtils()
		@templates.ApiUtils()
	}
}

templ AdminKeepRequestCard(request models.KeepRequest) {
	<div class="card">
		<div class="flex items-center justify-between p-6">
			<div class="flex items-center space-x-4">
				<!-- Poster/Icon -->
				<div class="flex-shrink-0">
					if request.PosterURL != "" {
						<img src={ request.PosterURL } alt={ request.Title } class="w-16 h-24 object-cover rounded"/>
					} else {
						<div class="w-16 h-24 bg-gray-700 rounded flex items-center justify-center">
							<svg class="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h3a1 1 0 011 1v2a1 1 0 01-1 1h-1v12a2 2 0 01-2 2H6a2 2 0 01-2-2V8H3a1 1 0 01-1-1V5a1 1 0 011-1h3z"></path>
							</svg>
						</div>
					}
				</div>
				<!-- Details -->
				<div class="flex-1 min-w-0">
					<div class="flex items-center space-x-2">
						<h4 class="text-lg font-medium text-gray-100 truncate">{ request.Title }</h4>
						<span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-700 text-gray-300">
							{ request.Type }
						</span>
						if request.Year > 0 {
							<span class="text-sm text-gray-400">{ fmt.Sprint(request.Year) }</span>
						}
					</div>
					<div class="mt-1 flex items-center space-x-4 text-sm text-gray-400">
						<div class="flex items-center">
							<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
							</svg>
							{ request.Library }
						</div>
						if !request.DeletionDate.IsZero() {
							<div class="flex items-center">
								<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
								Deletes { formatRelativeTime(request.DeletionDate) }
							</div>
						}
						<div class="flex items-center">
							<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3a4 4 0 118 0v4M5 7h14l-1 14H6L5 7z"></path>
							</svg>
							Expires { formatRelativeTime(request.ExpiryDate) }
						</div>
					</div>
				</div>
			</div>
			<!-- Actions -->
			<div class="flex items-center space-x-2">
				<button
					id={ "accept-" + request.MediaID }
					onclick={ acceptKeepRequest(request.MediaID) }
					class="inline-flex items-center px-4 py-2 rounded-lg font-medium transition-colors duration-200"
					style="background-color: #16a34a; color: white;"
					onmouseover="this.style.backgroundColor='#15803d'"
					onmouseout="this.style.backgroundColor='#16a34a'"
				>
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
					</svg>
					Accept
				</button>
				<button
					id={ "decline-" + request.MediaID }
					onclick={ declineKeepRequest(request.MediaID) }
					class="inline-flex items-center px-4 py-2 rounded-lg font-medium transition-colors duration-200"
					style="background-color: #dc2626; color: white;"
					onmouseover="this.style.backgroundColor='#b91c1c'"
					onmouseout="this.style.backgroundColor='#dc2626'"
				>
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
					Decline
				</button>
			</div>
		</div>
	</div>
}

templ AdminEmptyState() {
	<div class="text-center py-12">
		<div class="mx-auto w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center mb-6">
			<svg class="w-12 h-12 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
		</div>
		<h3 class="text-xl font-semibold text-gray-300 mb-2">No pending keep requests</h3>
		<p class="text-gray-500">
			All keep requests have been processed. Check back later for new requests.
		</p>
	</div>
}

script acceptKeepRequest(mediaID string) {
	const buttonId = 'accept-' + mediaID;
	const originalContent = window.setButtonLoading(buttonId, 'Processing...');
	if (!originalContent) return;
	
	window.makeApiRequest('/admin/api/keep-requests/' + mediaID + '/accept')
	.then(data => {
		if (data.success) {
			window.setButtonSuccess(buttonId, 'Accepted', '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>');
			setTimeout(() => {
				location.reload();
			}, 500);
		} else {
			throw new Error(data.error || 'Unknown error');
		}
	})
	.catch(error => {
		console.error('Error:', error);
		window.showToast('Failed to accept request: ' + error.message, 'error');
		window.restoreButton(buttonId, originalContent);
	});
}

script declineKeepRequest(mediaID string) {
	const buttonId = 'decline-' + mediaID;
	const originalContent = window.setButtonLoading(buttonId, 'Processing...');
	if (!originalContent) return;
	
	window.makeApiRequest('/admin/api/keep-requests/' + mediaID + '/decline')
	.then(data => {
		if (data.success) {
			window.setButtonSuccess(buttonId, 'Declined', '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>');
			setTimeout(() => {
				location.reload();
			}, 500);
		} else {
			throw new Error(data.error || 'Unknown error');
		}
	})
	.catch(error => {
		console.error('Error:', error);
		window.showToast('Failed to decline request: ' + error.message, 'error');
		window.restoreButton(buttonId, originalContent);
	});
}
