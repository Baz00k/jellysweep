package components

templ PWAScript() {
	<script>
		// Clean, robust PWA Manager
		class PWAManager {
			constructor() {
				this.deferredPrompt = null;
				this.userData = null;
				this.swRegistration = null;
				this.notificationsManager = null;
				this.init();
			}

			async init() {
				console.log('Initializing PWA Manager...');
				
				// Step 1: Fetch user data
				await this.fetchUserData();
				
				// Step 2: Register service worker
				await this.registerServiceWorker();
				
				// Step 3: Setup PWA install functionality
				this.setupPWAInstall();
				
				// Step 4: Setup push notifications
				this.setupPushNotifications();
			}

			async fetchUserData() {
				try {
					const response = await fetch('/api/me');
					if (response.ok) {
						this.userData = await response.json();
						console.log('User data fetched:', this.userData);
					} else {
						console.error('Failed to fetch user data');
					}
				} catch (error) {
					console.error('Error fetching user data:', error);
				}
			}

			async registerServiceWorker() {
				if (!('serviceWorker' in navigator)) {
					console.log('Service Worker not supported');
					return null;
				}

				try {
					console.log('Registering service worker...');
					this.swRegistration = await navigator.serviceWorker.register('/static/sw.js');
					console.log('Service Worker registered successfully:', this.swRegistration);
					
					// Don't wait for ready with timeout - just continue
					// The service worker will be available when needed
					
					// Handle updates
					if (this.swRegistration.addEventListener) {
						this.swRegistration.addEventListener('updatefound', () => {
							const newWorker = this.swRegistration.installing;
							if (newWorker) {
								newWorker.addEventListener('statechange', () => {
									if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
										this.showUpdateNotification();
									}
								});
							}
						});
					}
					
					return this.swRegistration;
				} catch (error) {
					console.error('Service Worker registration failed:', error);
					// Don't return null - try to get existing registration
					try {
						this.swRegistration = await navigator.serviceWorker.getRegistration();
						console.log('Got existing service worker registration:', this.swRegistration);
						return this.swRegistration;
					} catch (fallbackError) {
						console.error('Failed to get existing registration:', fallbackError);
						return null;
					}
				}
			}

			setupPWAInstall() {
				// Listen for install prompt
				window.addEventListener('beforeinstallprompt', (e) => {
					e.preventDefault();
					this.deferredPrompt = e;
					console.log('Install prompt available');
					// Show install button immediately when prompt is available
					this.showInstallButton();
				});

				// Create install button if needed
				this.createInstallButton();
			}

			createInstallButton() {
				// Check if already installed
				if (window.matchMedia('(display-mode: standalone)').matches || 
					window.navigator.standalone === true) {
					console.log('App is already installed');
					return;
				}

				// Use existing install button from template
				const installSection = document.getElementById('mobile-install-section');
				const installButton = document.getElementById('mobile-install-button');
				
				if (installButton) {
					installButton.addEventListener('click', () => this.installApp());
					
					// Show button for Firefox users (since they don't get beforeinstallprompt)
					if (navigator.userAgent.toLowerCase().includes('firefox')) {
						setTimeout(() => {
							this.showInstallButton();
						}, 1000);
					}
				}
			}

			showInstallButton() {
				const installSection = document.getElementById('mobile-install-section');
				if (installSection) {
					installSection.classList.remove('hidden');
					console.log('Install button shown');
				}
			}

			hideInstallButton() {
				const installSection = document.getElementById('mobile-install-section');
				if (installSection) {
					installSection.classList.add('hidden');
					console.log('Install button hidden');
				}
			}

			async installApp() {
				if (this.deferredPrompt) {
					this.deferredPrompt.prompt();
					const result = await this.deferredPrompt.userChoice;
					console.log('Install result:', result);
					this.deferredPrompt = null;
					
					if (result.outcome === 'accepted') {
						this.hideInstallButton();
					}
				} else {
					// Show instructions for Firefox or other browsers
					this.showManualInstallInstructions();
				}
			}

			setupPushNotifications() {
				// Initialize notifications manager if available
				if (window.NotificationsManager) {
					this.notificationsManager = new window.NotificationsManager(this.userData, this.swRegistration);
				} else {
					console.log('NotificationsManager not available');
				}
			}

			showUpdateNotification() {
				const notification = document.createElement('div');
				notification.className = 'fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg z-50';
				notification.innerHTML = `
					<div class="flex items-center space-x-2">
						<span>App updated! Refresh to apply.</span>
						<button onclick="window.location.reload()" class="ml-2 underline">Refresh</button>
					</div>
				`;
				
				document.body.appendChild(notification);
				
				setTimeout(() => {
					notification.remove();
				}, 10000);
			}

			showManualInstallInstructions() {
				const instructions = document.createElement('div');
				instructions.className = 'fixed bottom-4 right-4 max-w-sm bg-blue-600 text-white p-4 rounded-lg shadow-lg z-50';
				instructions.innerHTML = `
					<div class="space-y-2">
						<div class="flex items-center justify-between">
							<span class="font-medium">Install App</span>
							<button onclick="this.parentElement.parentElement.remove()" class="text-white/80 hover:text-white">✕</button>
						</div>
						<p class="text-sm">Tap the menu (⋮) and look for "Install" or "Add to Home Screen"</p>
					</div>
				`;
				
				document.body.appendChild(instructions);
				
				setTimeout(() => {
					instructions.remove();
				}, 15000);
			}
		}

		// Initialize when DOM is ready
		document.addEventListener('DOMContentLoaded', () => {
			new PWAManager();
		});
	</script>
}
